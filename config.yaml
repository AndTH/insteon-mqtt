#==========================================================================
#
# Insteon <-> MQTT bridge configuration file.
#
#==========================================================================

#==========================================================================
#
# Optional logging configuration (can also be set via the command line)
#
#==========================================================================
logging:
  # 10=DEBUG, 20=INFO, 30=WARNING, 40=ERROR
  level: 10

  # Print messages to the screen.
  #screen: False

  # Print messages to a file.
  #file: /var/log/insteon_mqtt.log

#==========================================================================
#
# Insteon configuration
#
#==========================================================================
insteon:
  # Serial device:
  # USB PLM modem
  port: "/dev/insteon"
  #baudrate: 19200

  # Network socket:
  # Insteon HUB PLM network
  #port: "socket://192.168.1.5:9761"

  # PLM modem Insteon hex address
  address: 44.85.11

  # Device database file storage location.
  #storage: "/var/lib/insteon-mqtt"
  storage: "."

  # Automatically refresh device states and databases (if needed) at
  # startup.  This may be slow depending on the number of devices.
  startup_refresh: False

  #------------------------------------------------------------------------
  # Devices require the Insteon hex address and an optional name. Note
  # that MQTT address topics are always the lower case hex address or
  # the input name depending on how they are configured below.
  devices:
    # On/off switch devices (outlets, wall switches, appliance modules, etc).
    switch:
      - 37.2d.35: "lamp1"

    # Dimming devices (outlets, wall switches, lamp modules, etc).
    dimmer:
      - 3a.29.84: "lamp2"
      - 48.3d.46
      - 48.b0.ad

    # Battery powered motion sensors.
    motion:
      - 21.d6.d9: "front door"

    # Battery powered mini remotes
    mini_remote4:

    mini_remote8:
      - 3f.07.d4: "remote1"

    # Smoke bridge module
    smoke_bridge:
      - 44.a3.79: "smoke alarm"

  #------------------------------------------------------------------------
  # FUTURE: Insteon scene definitions.
  #scenes:
  #  - scene_01:


#==========================================================================
#
# MQTT configuration
#
#==========================================================================
mqtt:
  broker: 127.0.0.1
  port: 1883
  # Optional broker login data.
  #username:
  #password:

  # Outbound messages configuration.  Retain should generally be 1
  # so that the current state is available when someone subscribes.
  qos: 1
  retain: 0

  # Input commands topic to allow changes to a device.  See the device
  # documentation for details.  NOTE: This is usually not needed for
  # home automation - it's used by the command line tool to modify the
  # Insteon devices, network, and scenes.  The address or name of the
  # device will follow the command topic (insteon/command/aa.bb.cc) to
  # send these low level commands.
  cmd_topic: 'insteon/command'

  #------------------------------------------------------------------------
  # On/off switches
  #------------------------------------------------------------------------

  # On/Off switch.  Non-dimming lamp modules and wall switches.
  # In Home Assistant use MQTT switch with a configuration like:
  #   switch:
  #     - platform: mqtt
  #       state_topic: 'insteon/aa.bb.cc/state'
  #       command_topic: 'insteon/aa.bb.cc/set'
  switch:
    # Output state change topic and template.  This message is sent
    # whenever the device state changes for any reason.  Available
    # variables for templating are:
    #   address = 'aa.bb.cc'
    #   name = 'device name'
    #   on = 0/1
    #   on_str = 'off', 'on'
    state_topic: 'insteon/{{address}}/state'
    state_payload: '{{on_str.upper()}}'

    # Input on/off command.  Similar functionality to the cmd_topic
    # but only for turning the device on and off.  The output of
    # passing the payload through the payload must match the following:
    #   { "cmd" : 'on'/'off', ["instant" : 0/1] }
    # Available variables for templating are:
    #   value = the input payload
    #   json = the input payload converted to json.  Use json.VAR to extract
    #          a variable from a json payload.
    on_off_topic: 'insteon/{{address}}/set'
    on_off_payload: '{ "cmd" : "{{value.lower()}}" }'

  #------------------------------------------------------------------------
  # Dimmers
  #------------------------------------------------------------------------

  # Dimmer switch.  Dimming lamp modules and wall switches.  In Home
  # Assistant use MQTT light with a configuration like the following -
  # this gets HA to send the brightness value as the payload for all
  # control of the light.
  #   light:
  #     - platform: mqtt_json
  #       name: "insteon 1"
  #       state_topic: "insteon/48.b0.ad/state"
  #       command_topic: "insteon/48.b0.ad/level"
  #       brightness: true
  #
  dimmer:
    # Output state change topic and payload.  This message is sent
    # whenever the device state changes for any reason.  Available
    # variables for templating are:
    #   address = 'aa.bb.cc'
    #   name = 'device name'
    #   on = 0/1
    #   on_str = 'off', 'on'
    #   level_255 = 0-255
    #   level_100 = 0-100
    state_topic: 'insteon/{{address}}/state'
    state_payload: >
       { "state" : "{{on_str.upper()}}", "brightness" : {{level_255}} }

    # Input on/off command.  Similar functionality to the cmd_topic
    # but only for turning the device on and off.  The output of
    # passing the payload through the payload must match the following:
    #   { "cmd" : "on"/"off", ["instant" : 0/1] }
    # Available variables for templating are:
    #   address = 'aa.bb.cc'
    #   name = 'device name'
    #   value = the input payload
    #   json = the input payload converted to json.  Use json.VAR to extract
    #          a variable from a json payload.
    on_off_topic: 'insteon/{{address}}/set'
    on_off_payload: '{ "cmd" : "{{value.lower()}}" }'

    # Input dimming on/off command.  Similar functionality to the cmd_topic
    # but only for turning the device on and off and setting the
    # level.  The output of passing the payload through the payload
    # passing the payload through the payload must match the following:
    #   { "cmd" : "on"/"off", "level" : LEVEL, ["instant" : 0/1] }
    # where:
    #   LEVEL = 0->255 dimmer level
    # Available variables for templating are:
    #   address = 'aa.bb.cc'
    #   name = 'device name'
    #   value = the input payload
    #   json = the input payload converted to json.  Use json.VAR to extract
    #          a variable from a json payload.
    level_topic: "insteon/{{address}}/level"
    # NOTE: HASS JSON switch doesn't send brightness in some cases
    # when actuated so handle that here in the template code.  The
    # other HASS MQTT options also have this problem.
    level_payload: >
       { "cmd" : "{{json.state.lower()}}",
         "level" : {% if json.brightness is defined %}
                      {{json.brightness}}
                   {% else %}
                      255
                   {% endif %} }

  #------------------------------------------------------------------------
  # Motion sensors
  #------------------------------------------------------------------------

  # In Home Assistant use MQTT binary sensor with a configuration like:
  #   binary_sensor:
  #     - platform: mqtt
  #       state_topic: 'insteon/aa.bb.cc/state'
  #       device_class: 'motion'
  #
  #     - platform: mqtt
  #       state_topic: 'insteon/aa.bb.cc/dawn'
  #       device_class: 'light'
  #
  #     - platform: mqtt
  #       state_topic: 'insteon/aa.bb.cc/low_battery'
  #       device_class: 'battery'
  motion:
    # Output state change topic and payload.  This message is sent
    # whenever the device state changes for any reason.  Available
    # variables for templating are:
    #   address = 'aa.bb.cc'
    #   name = 'device name'
    #   on = 0/1
    #   on_str = 'off', 'on'
    state_topic: 'insteon/{{address}}/state'
    state_payload: '{{on_str.upper()}}'

    # Output dawn/dusk change topic and payload.  This message is sent
    # whenever the device light sensor detects dawn or dusk changes.
    # Available variables for templating are:
    #   address = 'aa.bb.cc'
    #   name = 'device name'
    #   is_dawn = 0/1
    #   is_dawn_str = 'off', 'on'
    #   is_dusk = 0/1
    #   is_dusk_str = 'off', 'on'
    #   state = 'dawn', 'dusk'
    dawn_dusk_topic: 'insteon/{{address}}/dawn'
    dawn_dusk_payload: '{{is_dawn_str.upper()}}'

    # Output low battery topic and payload.  This message is sent
    # whenever the device detects a low battery. Available variables
    # for templating are:
    #   address = 'aa.bb.cc'
    #   name = 'device name'
    #   is_low = 0/1
    #   is_low_str = 'off', 'on'
    low_battery_topic: 'insteon/{{address}}/battery'
    low_battery_payload: '{{is_low_str.upper()}}'

  #------------------------------------------------------------------------
  # Smoke Bridge
  #------------------------------------------------------------------------

  # In Home Assistant use MQTT binary sensor with a configuration like:
  #   binary_sensor:
  #     - platform: mqtt
  #       state_topic: 'insteon/aa.bb.cc/smoke'
  #       device_class: 'smoke'
  #
  #     - platform: mqtt
  #       state_topic: 'insteon/aa.bb.cc/battery'
  #       device_class: 'battery'
  #
  #     - platform: mqtt
  #       state_topic: 'insteon/aa.bb.cc/co'
  #       device_class: 'gas'
  #
  #     - platform: mqtt
  #       state_topic: 'insteon/aa.bb.cc/error'
  smoke_bridge:
    # Output state change topic and payload.  This message is sent
    # whenever the device state changes for any reason.  Available
    # variables for templating are:
    #   address = 'aa.bb.cc'
    #   name = 'device name'
    #   on = 0/1
    #   on_str = 'off', 'on'
    smoke_topic: 'insteon/{{address}}/smoke'
    smoke_payload: '{{on_str.upper()}}'

    co_topic: 'insteon/{{address}}/co'
    co_payload: '{{on_str.upper()}}'

    battery_topic: 'insteon/{{address}}/battery'
    battery_payload: '{{on_str.upper()}}'

    error_topic: 'insteon/{{address}}/error'
    error_payload: '{{on_str.upper()}}'

#----------------------------------------------------------------
